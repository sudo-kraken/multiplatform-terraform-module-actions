# Name of the workflow
name: Init AWS EKS Jumpbox CD

# Define environment variables
env:
  # AWS Access Key
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
  # AWS Secret Key
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY }}

# Define the events that trigger the workflow
on:
  # Trigger the workflow manually from the Actions tab
  workflow_dispatch:
    # It requires several inputs provided by the user
    inputs:
      # These inputs are details for the EKS environment, deployment parameters, and tags
      cluster_name:
        description: 'Enter the existing cluster name to attach the jumpbox to'
        required: true   
      vpc_id:
        description: 'Enter the VPC id i.e. vpc-00000000000000001'
        required: true        
      vpc_public_subnet_id:
        description: 'Enter the public subnet id to deploy the jumpbox in i.e. "subnet-00000000000000001"'
        required: true          
      client_tag:
        description: 'Enter the value to be used in the client tag (all lowercase) i.e. "client1" or "shared"'
        required: true    
      product_tag:
        description: 'Enter the value to be used in the product tag (all lowercase) i.e. "product1" or "product2"'
        required: true          
      environment_tag:
        description: 'Enter the value to be used in the env tag (all lowercase) i.e. "prod" or "dev"'
        required: true         

# Define permissions for this workflow
permissions:
  # Only read access to the contents is needed
  contents: read

# Define jobs in this workflow  
jobs:
  # Define a job for Terraform actions
  generate-main-tf:
    # Name of the job  
    name: 'Terraform AWS EKS Jumpbox main.tf Generation'
    # Define the type of runner that the job will run on
    runs-on: [self-hosted, devops]
    # Define the environment in which the job will run
    environment: production

    # Define steps for this job
    steps:
      # Checkout the repository to the GitHub Actions runner 
      - name: Checkout
        uses: actions/checkout@v3    

      # If main.tf does not exist, we generate a new one using user input
      - name: Check if main.tf exists
        run: |
          if [ -f "main.tf" ]; then
            echo "main.tf already exists, skipping file generation."
            echo "file_exists=true" >> $GITHUB_OUTPUT
          else
            echo "main.tf does not exist, continuing with file generation."
            echo "file_exists=false" >> $GITHUB_OUTPUT
          fi
        id: check-main-tf
      
      - name: Generate main.tf with user input
        if: steps.check-main-tf.outputs.file_exists == 'false'
        run: |
          cat > main.tf << EOF
          # Define the required version of Terraform and the required AWS provider version
          terraform {
            required_version = ">= 1.5.0"

            backend "s3" {}
            
            required_providers {
              aws = {
                source  = "hashicorp/aws"
                version = "~> 5.0"
              }
              
            }
            
          }

          # Configure the AWS Provider          
          provider "aws" {
            region = "eu-west-2"
          }
          
          module "new_vpc" {
            source = "./modules/aws-ec2-jumpbox"
          
            name = "<cluster_name>"
            vpc_id = "<vpc_id>"
            public_subnet_id = "<vpc_public_subnet_id>"
            client_tag = "<client_tag>"
            product_tag = "<product_tag>"
            environment_tag = "<environment_tag>"
            aws_access = "<aws_access>"
            aws_secret = "<aws_secret>"
            
          }

          output "encrypted_password_data" {
            value = module.new_vpc.encrypted_password_data
            sensitive = true
          }

          EOF

          # Replace the placeholders with the actual input values
          sed -i "s|<cluster_name>|${{ github.event.inputs.cluster_name }}|g" main.tf
          sed -i "s|<vpc_id>|${{ github.event.inputs.vpc_id }}|g" main.tf
          sed -i "s|<vpc_public_subnet_id>|${{ github.event.inputs.vpc_public_subnet_id }}|g" main.tf
          sed -i "s|<client_tag>|${{ github.event.inputs.client_tag }}|g" main.tf
          sed -i "s|<product_tag>|${{ github.event.inputs.product_tag }}|g" main.tf
          sed -i "s|<environment_tag>|${{ github.event.inputs.environment_tag }}|g" main.tf
          sed -i "s|<aws_access>|${{ env.AWS_ACCESS_KEY_ID }}|g" main.tf
          sed -i "s|<aws_secret>|${{ env.AWS_SECRET_ACCESS_KEY }}|g" main.tf

          # Print the generated main.tf
          cat main.tf

      # If a new main.tf file was created, commit and push it to the repository
      - name: Commit and push main.tf
        if: steps.check-main-tf.outputs.file_exists == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git add main.tf
          git commit -m "Add generated main.tf"
          git push
          
