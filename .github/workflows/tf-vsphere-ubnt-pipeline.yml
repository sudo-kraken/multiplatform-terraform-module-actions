# Author:  Joe Harrison
# This is a GitHub Actions workflow that uses Terraform to deploy a vSphere Ubuntu 22.04 VM. 
# It will generate a main.tf file based on user input, in the root of the repository and then apply the Terraform configuration to create the VM. 
# If the Terraform apply fails, it will initiate a cleanup by destroying the resources created.

# Name of the workflow
name: 'vSphere Ubuntu 22.04 CD'

# Define environment variables
env:
  # vSphere password used for authentication
  TF_VAR_vsphere_password: ${{ secrets.VSPHERE_PASSWORD }}
  # SSH password used for authentication
  TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}  

# Define the events that trigger the workflow
on:
  # Trigger the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      deployment_name:
        description: 'Enter the name to give the deployed VM in VMware and the hostname'
        required: true    
      vsphere_user:
        description: 'Enter the vSphere user, i.e. "user@domain.local"'
        required: true   
      vsphere_datacenter:
        description: 'Enter the vSphere server IP and Datacenter to use, separated by commas i.e. "192.168.1.100,DATACENTER1"'
        required: true  
      vsphere_cluster:
        description: 'Enter the name of the vSphere cluster to deploy to'
        required: true              
      vsphere_folder:
        description: 'Enter the path of the existing folder to deploy to i.e. "Path/To/VM"'
        required: true             
      vsphere_datastore:
        description: 'Enter the vSphere datastore to deploy the VM on'
        required: true
      vsphere_network:
        description: 'Enter the vSphere port group to connect the VM to'
        required: true
      deployment_cpu:
        description: 'Enter the number of CPUs to allocate to the VM'
        required: true
        type: choice
        options:
        - '2'
        - '4'
        - '6'
        - '8'
      deployment_ram:
        description: 'Enter the amount of RAM to allocate to the VM in MB'
        required: true
        type: choice
        options:
        - '4096'
        - '8192'
        - '16384'
        - '32768'
      deployment_network_info:
        description: 'Enter the IP address, subnet mask, and default gateway for the VM (comma-separated)'
        required: true

# Define permissions for this workflow
permissions:
  contents: read

# Define jobs in this workflow  
jobs:
  # Define a job for main.tf file actions
  generate-main-tf:
    name: 'Terraform vSphere Ubuntu 22.04 main.tf Generation'
    runs-on: [self-hosted, devops]
    environment: production

    steps:
      # Checkout the repository to the GitHub Actions runner 
      - name: Checkout
        uses: actions/checkout@v4  

      # If main.tf does not exist, we generate a new one using user input
      - name: Check if main.tf exists
        run: |
          if [ -f "main.tf" ]; then
            echo "main.tf already exists, skipping file generation."
            echo "file_exists=true" >> $GITHUB_ENV      
          else
            echo "main.tf does not exist, continuing with file generation."
            echo "file_exists=false" >> $GITHUB_ENV
          fi
        id: check-main-tf
      
      - name: Generate main.tf with user input
        if: env.file_exists == 'false'
        run: |
          # Using the Internal Field Separator (IFS) variable, parse the input strings into individual variables
          IFS=',' read -r vsphere_server vsphere_datacenter <<< "${{ github.event.inputs.vsphere_datacenter }}"
          cat > main.tf << EOF
          ## Main Terraform file to call the vsphere-ubuntu-22.04.2-terraform module and execute with custom parameters

          ## Variables to be populated by GitHub Secrets at runtime
          variable "deployment_password" {}
          variable "vsphere_password" {}

          # Define the required version of Terraform and the required vSphere provider version
          terraform {
            required_version = ">= 1.5.0"

            required_providers {
              vsphere = {
                source = "hashicorp/vsphere"
                version = "2.4.1"
              }
            }
          }

          # Define the vSphere provider and specify the vSphere login credentials and server details
          provider "vsphere" {
            user           = "<vsphere_user>"
            password       = var.vsphere_password
            vsphere_server = "$vsphere_server"
            allow_unverified_ssl = true
          }

          # Define the module source and its location
          module "vsphere-ubnt" {
            source = "./modules/vmsphere-ubuntu"

            # Define vSphere information
            vsphere_server        = "$vsphere_server"
            vsphere_datacenter    = "$vsphere_datacenter"
            vsphere_datasource    = "<vsphere_datastore>"
            vsphere_cluster       = "<vsphere_cluster>"
            vsphere_network       = "<vsphere_network>"
            
            # Define OS template information
            vsphere_template = "UBNT-2204-PKR-V1"            
            
            # Define user information
            deployment_user       = "admin"
            deployment_password   = var.deployment_password

            # Define VM deployment information
            deployment_name       = "<deployment_name>"
            deployment_vm_folder  = "<vsphere_folder>"
            deployment_domain     = "ubuntu.local"
            deployment_cpu        = "<deployment_cpu>"
            deployment_ram_mb     = "<deployment_ram>"

            # Define additional disks for the VM
            deployment_additional_disks = [
              {
                id     = 1
                dev    = "sdb"
                lvm    = 0
                sizeGB = 200
                dir    = "/mnt/DATA-DRIVE"
              }
            ]

            # Define networking information for the VM
            deployment_ip       = "<deployment_ip>"
            deployment_subnet   = "<deployment_subnet>"
            deployment_gateway  = "<deployment_gateway>"
            dns_server_list     = [ "1.1.1.1" ]
            dns_suffix_list     = [ "" ]
          }
          
          EOF

          # Replace the placeholders with the actual input values
          sed -i "s|<vsphere_user>|${{ github.event.inputs.vsphere_user }}|g" main.tf
          sed -i "s|<vsphere_datastore>|${{ github.event.inputs.vsphere_datastore }}|g" main.tf
          sed -i "s|<vsphere_network>|${{ github.event.inputs.vsphere_network }}|g" main.tf
          sed -i "s|<vsphere_folder>"|${{ github.event.inputs.vsphere_folder }}|g" main.tf
          sed -i "s|<vsphere_cluster>"|${{ github.event.inputs.vsphere_cluster }}|g" main.tf
          sed -i "s|<deployment_name>|${{ github.event.inputs.deployment_name }}|g" main.tf
          sed -i "s|<deployment_cpu>|${{ github.event.inputs.deployment_cpu }}|g" main.tf
          sed -i "s|<deployment_ram>|${{ github.event.inputs.deployment_ram }}|g" main.tf       

          IFS=',' read -ra DEPLOYMENT_NETWORK_INFO <<< "${{ github.event.inputs.deployment_network_info }}"
          sed -i "s|<deployment_ip>|${DEPLOYMENT_NETWORK_INFO[0]}|g" main.tf
          sed -i "s|<deployment_subnet>|${DEPLOYMENT_NETWORK_INFO[1]}|g" main.tf
          sed -i "s|<deployment_gateway>|${DEPLOYMENT_NETWORK_INFO[2]}|g" main.tf

          # Print the generated main.tf
          cat main.tf

      # If a new main.tf file was created, commit and push it to the repository
      - name: Commit and push main.tf
        if: steps.check-main-tf.outputs.file_exists == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git add main.tf
          git commit -m "Add generated main.tf"
          git push
          
  # Define a job for Terraform actions          
  terraform-vsphere-ubuntu-22_04-pipeline:
    name: 'Terraform vSphere Ubuntu 22.04 Pipeline'
    needs: generate-main-tf
    runs-on: [self-hosted, devops]
    environment: production

    steps:   
    # Checkout the repository to the GitHub Actions runner 
    - name: Checkout
      uses: actions/checkout@v4

    # Fetch the latest commit  
    - name: Fetch the latest commit
      run: |
        git fetch origin +refs/heads/*:refs/remotes/origin/* --depth=1
        LATEST_COMMIT=$(git rev-parse origin/${GITHUB_REF##*/})
        git checkout $LATEST_COMMIT       
                
    # Setup Node.js environment with a specific version
    - name: Node Setup
      uses: actions/setup-node@v3
      with:
        node-version: '20'
    
    # Setup Terraform CLI on the runner
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    # Initialise your Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
    
    # Apply the changes required to reach the desired state of the configuration
    - name: Terraform Apply
      id: apply    
      continue-on-error: true
      run: terraform apply -auto-approve

    # Check if Terraform Apply failed and set an output variable
    - name: Check Terraform Apply Outcome
      id: check
      run: echo "apply_failed=${{ steps.apply.outcome == 'failure' }}" >> $GITHUB_ENV

    # Destroy if Terraform Apply failed
    - name: Terraform Apply Failure Handler
      if: env.apply_failed == 'true'
      id: failure-handler
      run: |
        echo "Terraform Apply failed. Initiating cleanup..."
        terraform destroy -auto-approve
        echo "cleanup_done=true" >> $GITHUB_ENV