# Author:  Joe Harrison
# This is a GitHub Actions workflow that uses Terraform to deploy a vSphere Rocky Linux 9.3 VM. 
# It will generate a main.tf file based on user input, in the root of the repository and then apply the Terraform configuration to create the VM. 
# If the Terraform apply fails, it will initiate a cleanup by destroying the resources created.

# Name of the workflow
name: 'vSphere Rocky 9.3 CD'

# Define environment variables
env:
  # vSphere password used for authentication
  TF_VAR_vsphere_password: ${{ secrets.VSPHERE_PASSWORD }}
  # SSH password used for authentication
  TF_VAR_ssh_password: ${{ secrets.SSH_PASSWORD }}  

# Define the events that trigger the workflow
on:
  # Trigger the workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      vsphere_cluster:
        description: 'Enter the name of the vSphere cluster to deploy the rocky host on'
        required: true
      hostname:
        description: 'Enter desired hostname and vCenter User, separated by commas, i.e. "rocky-01,user@domain.local"'
        required: true
      vsphere_folder:
        description: 'Enter the name of the existing folder to deploy to i.e. "Path/To/VM"'
        required: true
      vsphere_datastore:
        description: 'Enter the vSphere datacenter and datastore to deploy the rocky host on, separated by commas, i.e. "DATACENTER1,DATASTORE4"'
        required: true
      vsphere_network:
        description: 'Enter the vSphere port group to connect the rocky host(s) to'
        required: true
      deployment_ips:
        description: 'Enter ip address(s) for the rocky host(s), i.e. "192.168.1.50" or "192.168.1.50,192.168.1.51"'
        required: true        
      deployment_cidr:
        description: 'Enter network subnet cidr, i.e. "22" or "24"'
        required: true
      deployment_gateway:
        description: 'Enter network gateway, i.e. "192.168.1.1"'
        required: true               
      deployment_cpu:
        description: 'Enter the number of CPUs to allocate to the rocky host'
        required: true
        type: choice
        options:
        - '4'
        - '8'
        - '16'
        - '32'
      deployment_ram:
        description: 'Enter the amount of RAM to allocate to the rocky host in MB'
        required: true
        type: choice
        options:
        - '8192'
        - '16384'
        - '32768'
        - '65536'

# Define permissions for this workflow
permissions:
  contents: read

# Define jobs in this workflow  
jobs:
  # Define a job for main.tf file actions
  generate-main-tf:
    name: 'Terraform vSphere Rocky 9.3 main.tf Generation'
    runs-on: [self-hosted, devops]
    environment: production

    steps:
      # Checkout the repository to the GitHub Actions runner 
      - name: Checkout
        uses: actions/checkout@v3  

      # If main.tf does not exist, we generate a new one using user input
      - name: Check if main.tf exists
        run: |
          if [ -f "main.tf" ]; then
            echo "main.tf already exists, skipping file generation."
            echo "file_exists=true" >> $GITHUB_ENV      
          else
            echo "main.tf does not exist, continuing with file generation."
            echo "file_exists=false" >> $GITHUB_ENV
          fi
        id: check-main-tf
      
      - name: Generate main.tf with user input
        if: env.file_exists == 'false'
        run: |
          # Using the Internal Field Separator (IFS) variable, parse the input strings into individual variables
          IFS=',' read -r hostname vsphere_server <<< "${{ github.event.inputs.hostname }}"
          IFS=',' read -r vsphere_datacenter vsphere_datastore <<< "${{ github.event.inputs.vsphere_datastore }}"
          cat > main.tf << EOF
          # Variables to be populated by GitHub Secrets at runtime
          # vCenter Password
          variable "vsphere_password" {}
          
          # Define the required version of Terraform and the required vSphere and AWS provider version
          terraform {
            required_version = ">= 1.5.0"
          
            required_providers {
              vsphere = {
                source = "hashicorp/vsphere"
                version = "2.6.1"
              }
                            
            }
            
          }
          
          # Connection to vSphere environment
          provider "vsphere" {
            user           = "$vsphere_user"
            password       = var.vsphere_password
            vsphere_server = "$vsphere_server"
            allow_unverified_ssl = true
          }
          
          # Define the module source and its location
          module "vsphere-rocky" {
            source = "./modules/vsphere-rocky-9.3"
          
            # Define vSphere Information 
            vsphere_config = {
              vcenter_server = "$vsphere_server"
              user           = "$vsphere_user"
              datacenter     = "$vsphere_datacenter"
              cluster        = "<vsphere_cluster>"
              datastore      = "$vsphere_datastore"
              vm_network     = "<vsphere_network>"
              vm_folder      = "<vsphere_folder>"
            }
          
            # Define Global Rocky Information 
            rocky-global = {
              username       = "administrator"
              timezone       = "Europe/London"          
            }
            
            # Define Rocky Host Information 
            rocky-host = {
              hostname            = "$hostname"
              num_cpus            = "<deployment_cpu>"
              memory              = "<deployment_ram>"
              disk_size           = "200"
              mgmt_use_dhcp       = "no"
              mgmt_interface_name = "ens192"
              mgmt_subnet         = "<deployment_subnet_cidr>"
              mgmt_ips            = "<deployment_ips>"
              mgmt_gateway        = "<deployment_gateway>"
              mgmt_dns_servers    = "1.1.1.1,1.0.0.1"
              template            = "ROCKY-9_3-PKR-V1"
            }  
            
          }
          EOF
          
          # Replace the placeholders with the actual input values
          sed -i "s|<vsphere_cluster>|${{ github.event.inputs.vsphere_cluster }}|g" main.tf
          sed -i "s|<vsphere_network>|${{ github.event.inputs.vsphere_network }}|g" main.tf
          sed -i "s|<vsphere_folder>|${{ github.event.inputs.vsphere_folder }}|g" main.tf
          sed -i "s|<deployment_subnet_cidr>|${{ github.event.inputs.deployment_cidr }}|g" main.tf
          sed -i "s|<deployment_ips>|${{ github.event.inputs.deployment_ips }}|g" main.tf
          sed -i "s|<deployment_gateway>|${{ github.event.inputs.deployment_gateway }}|g" main.tf
          sed -i "s|<deployment_cpu>|${{ github.event.inputs.deployment_cpu }}|g" main.tf
          sed -i "s|<deployment_ram>|${{ github.event.inputs.deployment_ram }}|g" main.tf  
          
          # Print the generated main.tf
          cat main.tf
      
      # If a new main.tf file was created, commit and push it to the repository
      - name: Commit and push main.tf
        if: steps.check-main-tf.outputs.file_exists == 'false'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git add main.tf
          git commit -m "Add generated main.tf"
          git push 

  # Define a job for Terraform actions          
  terraform-vsphere-rocky-9_3-pipeline:
    name: 'Terraform vSphere Rocky Linux 9.3 Pipeline'
    needs: generate-main-tf
    runs-on: [self-hosted, devops]
    environment: production

    steps:          
    # Checkout the repository to the GitHub Actions runner 
    - name: Checkout
      uses: actions/checkout@v3

    # Setup Node.js environment with a specific version
    - name: Node Setup
      uses: actions/setup-node@v3
      with:
        node-version: '16'
    
    # Setup Terraform CLI on the runner
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
    
    # Initialise your Terraform working directory
    - name: Terraform Init
      run: terraform init

    # Generate an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan
    
    # Apply the changes required to reach the desired state of the configuration
    - name: Terraform Apply
      id: apply    
      continue-on-error: true
      run: terraform apply -auto-approve

    # Check if Terraform Apply failed and set an output variable
    - name: Check Terraform Apply Outcome
      id: check
      run: echo "apply_failed=${{ steps.apply.outcome == 'failure' }}" >> $GITHUB_ENV

    # Destroy if Terraform Apply failed
    - name: Terraform Apply Failure Handler
      if: env.apply_failed == 'true'
      id: failure-handler
      run: |
        echo "Terraform Apply failed. Initiating cleanup..."
        terraform destroy -auto-approve
        echo "cleanup_done=true" >> $GITHUB_ENV      